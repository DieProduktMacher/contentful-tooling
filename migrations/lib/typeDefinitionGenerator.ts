import type { Environment } from 'contentful-management';
import CFDefinitionsBuilder from 'cf-content-types-generator/lib/cf-definitions-builder';
import {
  ContentTypeRenderer,
  DefaultContentTypeRenderer,
} from 'cf-content-types-generator/lib/renderer/type';
import type { CFContentType } from 'cf-content-types-generator/lib/types';
import * as prettier from 'prettier';
import { writeFile } from 'fs/promises';

/**
 * Simplfied renderer that only emits Field types, but no page entry types.
 *
 * We won't need named types for these as there are different localization use-cases and just
 * passing the Field types as generics into the Contentful JavaScript library will result in a more
 * intuitive developer experience.
 */

type RenderParameters = Parameters<ContentTypeRenderer['render']>;

class FieldTypeOnlyRenderer extends DefaultContentTypeRenderer {
  override render(
    contentType: RenderParameters[0],
    file: RenderParameters[1],
  ): void {
    const context = this.createContext();
    this.addDefaultImports(context);
    for (const structure of context.imports) {
      file.addImportDeclaration(structure);
    }
    file.addImportDeclaration({
      moduleSpecifier: '@contentful/rich-text-types',
      namespaceImport: 'CFRichTextTypes',
    });
    this.renderFieldsInterface(contentType, file, context);
  }
}

export const generateTypeDefinitions = async (
  environment: Environment,
  outputFile: string,
) => {
  const contentTypes = await environment.getContentTypes();
  let builder = new CFDefinitionsBuilder([new FieldTypeOnlyRenderer()]);

  for (const contentType of contentTypes.items) {
    builder = builder.appendType(contentType as unknown as CFContentType);
  }

  const codeTxt =
    `/*
AUTOGENERATED TYPE DEFINITIONS
Do not make manual changes to this file.

Run \`yarn migration-tool generateTypeDefinitions <environment>\` from the contentful directory to
update these definitions.
*/

` + builder.toString();

  const prettierOptions = await prettier.resolveConfig(outputFile);
  const formattedCodeTxt = await prettier.format(codeTxt, prettierOptions);
  writeFile(outputFile, formattedCodeTxt);
};
